package com.dgh.leetcode;

/**
 * 如果一个由 '0' 和 '1' 组成的字符串，是以一些 '0'（可能没有 '0'）后面跟着一些 '1'（也可能没有 '1'）的形式组成的，那么该字符串是单调递增的。
 * <p>
 * 我们给出一个由字符 '0' 和 '1' 组成的字符串 S，我们可以将任何 '0' 翻转为 '1' 或者将 '1' 翻转为 '0'。
 * <p>
 * 返回使 S 单调递增的最小翻转次数。
 * <p>
 *  
 * <p>
 * 示例 1：
 * <p>
 * 输入："00110"
 * 输出：1
 * 解释：我们翻转最后一位得到 00111.
 * 示例 2：
 * <p>
 * 输入："010110"
 * 输出：2
 * 解释：我们翻转得到 011111，或者是 000111。
 * 示例 3：
 * <p>
 * 输入："00011000"
 * 输出：2
 * 解释：我们翻转得到 00000000。
 *  
 * <p>
 * 提示：
 * <p>
 * 1 <= S.length <= 20000
 * S 中只包含字符 '0' 和 '1'
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/flip-string-to-monotone-increasing
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author 丁国航 Meow on 2020/9/7
 */
public class Number926_DP {

    /**
     * 这道题 如何能够想到用递归来解，又如何能找到转移公式呢
     * 是因为最小翻转次数这种话，应该联想到背包么？
     * dp[i][0] 表示 S[i]最后是0的最小翻转次数
     * dp[i][1] 表示 S[i]最后是1的最小翻转次数
     * So.
     * -- 如果S[i] = 0 dp[i][0] = dp[i-1][0]
     * -- 如果S[i] = 0 dp[i][1] = min(dp[i-1][1], dp[i-1][0]) + 1 // 因为可以前一位仍然是0
     * <p>
     * -- 如果S[i] = 1 dp[i][0] = dp[i-1][0] + 1
     * -- 如果S[i] = 1 dp[i][1] = min(dp[i-1][1], dp[i-1][0])
     */
    public int minFlipsMonoIncr(String S) {
        int[][] dp = new int[S.length() + 1][2];
        dp[0][0] = 0;
        dp[0][1] = 0;

        for (int i = 1; i <= S.length(); i++) {
            if (S.charAt(i - 1) == '0') {
                dp[i][0] = dp[i - 1][0];
                dp[i][1] = Math.min(dp[i - 1][1], dp[i - 1][0]) + 1;
            } else {
                dp[i][0] = dp[i - 1][0] + 1;
                dp[i][1] = Math.min(dp[i - 1][1], dp[i - 1][0]);
            }
        }

        return Math.min(dp[S.length()][0], dp[S.length()][1]);
    }
}
